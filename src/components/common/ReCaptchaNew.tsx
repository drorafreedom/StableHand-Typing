//src\components\common\ReCaptchaNew.tsx
import React, { useEffect } from 'react';

type ReCaptchaProps = {
  siteKey: string; // Your Google reCAPTCHA site key
  onTokenGenerated: (token: string) => void; // Callback when a token is generated
};

const ReCaptchaNew: React.FC<ReCaptchaProps> = ({ siteKey, onTokenGenerated }) => {
  useEffect(() => {
    if (window.grecaptcha) {
      window.grecaptcha.ready(() => {
        window.grecaptcha.execute(siteKey, { action: 'submit' }).then((token: string) => {
          console.log('Generated reCAPTCHA Token:', token);
          onTokenGenerated(token); // Pass the token back to the parent component
        });
      });
    }
  }, [siteKey, onTokenGenerated]);

  return <div>Google reCAPTCHA is running...</div>;
};

export default ReCaptchaNew;


/* //usage example 
import React from 'react';
import ReCaptcha from './components/ReCaptcha';

const App = () => {
  const handleToken = (token: string) => {
    console.log('Received Token:', token);
    // Send the token to your backend server for verification
  };

  return (
    <div>
      <h1>Google reCAPTCHA Example</h1>
      <ReCaptcha siteKey="YOUR_SITE_KEY" onTokenGenerated={handleToken} />
    </div>
  );
};

export default App;

 */

/* Sign Up for Google reCAPTCHA
Go to the Google reCAPTCHA Admin Console: https://www.google.com/recaptcha/admin/create

Log in with your Google account.

2. Register Your Website
Add a Label:

Provide a name for your project (e.g., "StableHand Typing reCAPTCHA").
Select reCAPTCHA Type:

Choose reCAPTCHA v3 (invisible reCAPTCHA for scoring-based validation).
Alternatively, use reCAPTCHA v2 if you prefer user interaction with a checkbox or image-based verification.
Add Domains:

Enter the domains where your app will be hosted.
For local testing, include localhost.
Accept Terms:

Agree to Google's terms of service.
Submit:

Click Submit to generate the reCAPTCHA keys.
3. Retrieve Your Keys
After submitting the form, you’ll get two keys:

Site Key:
Used in your frontend code to initialize reCAPTCHA.
Secret Key:
Used on your backend server to validate reCAPTCHA responses.
4. Add Site Key to Your Frontend
Use the site key in your frontend code to initialize reCAPTCHA.

For example, in the ReCaptcha.tsx component:

tsx
Copy code
<ReCaptcha siteKey="YOUR_SITE_KEY" onTokenGenerated={handleToken} />
Replace YOUR_SITE_KEY with the actual site key.

5. Add Secret Key to Your Backend
Use the secret key to verify the token generated by reCAPTCHA. Here’s an example using Node.js:

javascript
Copy code
const axios = require('axios');

const verifyReCaptcha = async (token) => {
  const secretKey = 'YOUR_SECRET_KEY';
  const response = await axios.post(`https://www.google.com/recaptcha/api/siteverify`, null, {
    params: {
      secret: secretKey,
      response: token,
    },
  });

  return response.data.success; // Returns true if valid
};
Replace YOUR_SECRET_KEY with your actual secret key.
 */

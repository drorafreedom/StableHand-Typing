// src/components/pages/DemographicsPage.tsx
import React, { useEffect, useState } from 'react';
import { useAuth } from '../../data/AuthContext';
import { db, storage } from '../../firebase/firebase';

import { Frame3 } from '../common/Frame';
import DateTimeDisplay from '../common/DateTimeDisplay';
import Alert, { type AlertType } from '../common/Alert';
import Button from '../common/Button';

import InputField from '../common/InputField';
import SelectField from '../common/SelectField';
import SelectWithOtherField from '../common/SelectWithOtherField';
import MultiSelectField from '../common/MultiSelectField';
import MultiSelectWithOtherField from '../common/MultiSelectWithOtherField';
import TextAreaField from '../common/TextAreaField';

import { demographicsFields } from '../../data/demographicsFields';

import {
  type QnrCtx,
  qnrLoadLocal, qnrSaveLocal, qnrClearLocal,
  qnrLoadDraft, qnrSaveDraft, qnrSubmitFinal,
} from '../../utils/questionnaireSave';

type FormState = Record<string, any>;
type ErrorsState = Record<string, string[]>;

const getValue = (s: FormState, name: string) =>
  s[name] ?? (Array.isArray(s[name]) ? [] : s[name]);

const barColor = (idx: number) =>
  ['bg-indigo-500', 'bg-teal-500', 'bg-rose-500', 'bg-amber-500', 'bg-sky-500'][idx % 5];

export default function DemographicsPage() {
  const { currentUser } = useAuth();

  // alert
  type AppAlert = { key: string; message: string; type: AlertType };
  const [appAlert, setAppAlert] = useState<AppAlert | null>(null);
  const showAlert = (type: AlertType, message: string) =>
    setAppAlert({ key: Math.random().toString(36).slice(2), type, message });

  // questionnaire context
  const slug = 'demographics';
  const ctx: QnrCtx = { db, storage, uid: currentUser?.uid, slug };

  const [form, setForm] = useState<FormState>(() => qnrLoadLocal(ctx) ?? {});
  const [errors, setErrors] = useState<ErrorsState>({});

  useEffect(() => {
    const id = setInterval(() => qnrSaveLocal(ctx, form), 3000);
    return () => clearInterval(id);
  }, [ctx.uid, ctx.slug, form]);

  const setField = (name: string, value: any) => setForm((prev) => ({ ...prev, [name]: value }));

  // DOB â†’ age derived
  useEffect(() => {
    if (!form.dob) return;
    const birth = new Date(form.dob);
    if (isNaN(birth.getTime())) return;
    const now = new Date();
    let age = now.getFullYear() - birth.getFullYear();
    const m = now.getMonth() - birth.getMonth();
    if (m < 0 || (m === 0 && now.getDate() < birth.getDate())) age--;
    if (age >= 0 && age <= 120 && form.age !== age) {
      setForm((prev) => ({ ...prev, age }));
    }
  }, [form.dob]);

  // simple showIf support if you add conditions
  const shouldShow = (field: any, state: FormState) => {
    const cond = field.showIf;
    if (!cond) return true;
    const v = state[cond.name];
    const list = cond.includesAny || cond.equalsAny;
    if (!list) return true;
    if (Array.isArray(v)) return v.some((x) => list.includes(x));
    return list.includes(v);
  };

  const renderField = (field: any) => {
    if (!shouldShow(field, form)) return null;
    const common = { label: field.label, name: field.name, errors: errors[field.name] || [] };
    const kind = (field.component || field.type || '').toString().toLowerCase();
    const htmlType = (field.inputType || field.type || 'text').toString();

    switch (kind) {
      case 'select':
        return (
          <SelectField
            {...common}
            value={getValue(form, field.name) || ''}
            options={field.options || []}
            onChange={(e) => setField(field.name, e.target.value)}
          />
        );
      case 'selectwithother':
        return (
          <SelectWithOtherField
            {...common}
            value={getValue(form, field.name) || ''}
            options={field.options || []}
            onChange={({ target }) => setField(field.name, target.value)}
          />
        );
      case 'multiselect':
        return (
          <MultiSelectField
            {...common}
            value={getValue(form, field.name) || []}
            options={field.options || []}
            onChange={(values) => setField(field.name, values)}
          />
        );
      case 'multiselectwithother':
        return (
          <MultiSelectWithOtherField
            {...common}
            values={getValue(form, field.name) || []}
            options={field.options || []}
            onChange={(values) => setField(field.name, values)}
          />
        );
      case 'textarea':
        return (
          <TextAreaField
            {...common}
            value={String(getValue(form, field.name) ?? '')}
            onChange={(e) => setField(field.name, e.target.value)}
          />
        );
      case 'input':
      default:
        return (
          <InputField
            {...common}
            type={htmlType}
            value={String(getValue(form, field.name) ?? '')}
            placeholder={field.placeholder || ''}
            onChange={(e) => setField(field.name, e.target.value)}
          />
        );
    }
  };

  const handleLoadDraft = async () => {
    try {
      const res = await qnrLoadDraft(ctx);
      if (!res) { showAlert('info', 'No draft found.'); return; }
      setForm(res.data);
      qnrSaveLocal(ctx, res.data);
      showAlert('success', 'Draft loaded.');
    } catch (e) {
      console.error(e);
      showAlert('error', 'Failed to load draft.');
    }
  };

  const handleSaveDraft = async () => {
    try {
      await qnrSaveDraft(ctx, form);
      qnrSaveLocal(ctx, form);
      showAlert('success', 'Draft saved.');
    } catch (e) {
      console.error(e);
      showAlert('error', 'Failed to save draft.');
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    // (Add validations here if you attach validators in demographicsFields)
    try {
      await qnrSubmitFinal(ctx, form, { awaitUpload: false, writeHistory: false });
      qnrClearLocal(ctx);
      showAlert('success', 'Final submitted.');
    } catch (e) {
      console.error(e);
      showAlert('error', 'Submit failed. Please try again.');
    }
  };

  return (
    <Frame3 bgColor="bg-orange-100">
      <h2 className="text-3xl font-bold mb-4 text-center">Demographics</h2>
      <div className="flex justify-end mb-2"><DateTimeDisplay /></div>

      {appAlert && <Alert key={appAlert.key} type={appAlert.type} message={appAlert.message} />}

      <form onSubmit={handleSubmit} className="mx-auto max-w-7xl p-4 space-y-8">
        {demographicsFields.map((section: any, idx: number) => (
          <section key={section.id} className="rounded-2xl border border-slate-200 bg-white shadow-sm overflow-hidden">
            <div className={`h-1 w-full ${barColor(idx)}`} />
            <div className="p-4 md:p-6">
              <h2 className="text-xl font-semibold">{section.title}</h2>
              {section.description && <p className="mt-1 text-sm text-slate-600">{section.description}</p>}

              <div className="mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {section.fields.map((f: any) => (
                  <div key={f.name} className={f.fullWidth ? 'lg:col-span-4 md:col-span-2 col-span-1' : ''}>
                    {renderField(f)}
                  </div>
                ))}
              </div>
            </div>
          </section>
        ))}

        <div className="flex flex-col sm:flex-row gap-3 justify-end pt-2">
          <Button type="button" onClick={handleLoadDraft} className="bg-slate-400 hover:bg-slate-500">Load draft</Button>
          <Button type="button" onClick={handleSaveDraft} className="bg-slate-500 hover:bg-slate-600">Save draft</Button>
          <Button type="submit" className="bg-blue-500 hover:bg-blue-600">Submit</Button>
        </div>
      </form>
    </Frame3>
  );
}

// // src/components/pages/DemographicsPage.tsx

// import React, { useState } from 'react';
// import { useNavigate } from 'react-router-dom';
// import { collection, doc, setDoc } from 'firebase/firestore';
// import { useAuth } from '../../data/AuthContext';
// import { db, storage } from '../../firebase/firebase';
// import InputField from '../common/InputField';
// import SelectField from '../common/SelectField';
// import SelectWithOtherField from '../common/SelectWithOtherField';
// import MultiSelectField from '../common/MultiSelectField';
// import TextAreaField from '../common/TextAreaField';
// import MultiSelectWithOtherField from '../common/MultiSelectWithOtherField';
// import AutosizeInputField from '../common/AutosizeInputField';
// import Button from '../common/Button';
// import Alert from '../common/Alert';
// import DateTimeDisplay from '../common/DateTimeDisplay';
// import { demographicFields, DemographicFields } from '../../data/demographicFields';
// import { ref, uploadString } from 'firebase/storage';
// import {
//   validatePositiveNumber,
//   validateEmail,
//   validatePhoneNumber,
//   validateRequired,
//   validateDOB,
//   validateAge,
//   compareAgeWithDOB,
//   validateMultiSelectField,
// } from '../../utils/validation';
// import { Frame3 } from '../common/Frame';

// interface FormData {
//   [key: string]: any;
// }

// const DemographicsPage: React.FC = () => {
//   const navigate = useNavigate();
//   const { currentUser } = useAuth();
//   const [formData, setFormData] = useState<FormData>({});
//   const [errors, setErrors] = useState<{ [key: string]: string[] }>({});
//   const [globalMessage, setGlobalMessage] = useState<{ message: string; type: 'success' | 'error' | '' } | null>(null);

//   const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
//     const { name, value } = e.target;
//     setFormData((prev) => ({ ...prev, [name]: value }));

//     const field = demographicFields.find((field) => field.name === name);
//     if (field && field.validate) {
//       const validationErrors = field.validate.map((validate) => validate(value, formData)).flat();
//       setErrors((prev) => ({ ...prev, [name]: validationErrors }));
//     } else {
//       setErrors((prev) => ({ ...prev, [name]: [] }));
//     }
//     setGlobalMessage(null);
//   };

//  const handleMultiSelectChange = (selectedValues: string[], name: string) => {
//   setFormData((prev) => ({ ...prev, [name]: selectedValues }));

//   const field = demographicFields.find((field) => field.name === name);
//   if (field && field.validate) {
//     const validationErrors = field.validate
//       .map((validate) => validate(selectedValues, formData))
//       .flat();
//     setErrors((prev) => ({ ...prev, [name]: validationErrors }));
//   } else {
//     setErrors((prev) => ({ ...prev, [name]: [] }));
//   }

//   setGlobalMessage(null);
// };


//   const validateAllFields = (): boolean => {
//     const newErrors: { [key: string]: string[] } = {};
//     let hasErrors = false;

//     demographicFields.forEach((field) => {
//       const value = formData[field.name];
//       if (field.validate) {
//         const validationErrors = field.validate.map((validate) => validate(value, formData)).flat();
//         if (validationErrors.length > 0) {
//           newErrors[field.name] = validationErrors;
//           hasErrors = true;
//         }
//       }
//     });

//     if (formData.dob && formData.age) {
//       const ageComparisonErrors = compareAgeWithDOB(formData.dob, formData.age);
//       if (ageComparisonErrors.length > 0) {
//         newErrors.age = ageComparisonErrors;
//         hasErrors = true;
//       }
//     }

//     setErrors(newErrors);
//     return !hasErrors;
//   };

//   const handleSubmit = async (e: React.FormEvent) => {
//     e.preventDefault();

//     if (!validateAllFields()) {
//       setGlobalMessage({ message: 'Please fill all missing fields.', type: 'error' });
//       return;
//     }

//     try {
//       const timestamp = new Date();
//       const localDateTime = timestamp.toLocaleString();
//       const formDataWithTimestamp = {
//         ...formData,
//         userId: currentUser?.uid,
//         timestamp: timestamp.toISOString(),
//         localDateTime: localDateTime,
//       };

//       const userDocRef = doc(collection(db, `users/${currentUser?.uid}/demographics`));
//       await setDoc(userDocRef, formDataWithTimestamp);

//       const csvData = Object.entries(formDataWithTimestamp)
//         .map(([key, value]) =>
//           Array.isArray(value) ? `${key},"${value.join(';')}"` : `${key},${value}`
//         )
//         .join('\n');

//       const csvRef = ref(storage, `users/${currentUser?.uid}/demographics/${timestamp.toISOString()}.csv`);
//       await uploadString(csvRef, csvData);

//       setGlobalMessage({ message: 'Data submitted successfully.', type: 'success' });
//       setTimeout(() => navigate('/thank-you', { state: { type: 'demographics' } }), 2000);
//     } catch (err) {
//       console.error('Error submitting demographics:', err);
//       setGlobalMessage({ message: 'Error submitting data. Please try again.', type: 'error' });
//     }
//   };

//   return (
//     <Frame3 bgColor="bg-yellow-100" paddingX="px-4" marginX="mx-2">
//       <h2 className="text-3xl font-bold mb-4 text-center">Demographics Information</h2>
//       <DateTimeDisplay />
//       <form onSubmit={handleSubmit}>
//         <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
//           {demographicFields.map((field) => {
//             if (field.type === 'input') {
//               return (
//                 <InputField
//                   key={field.name}
//                   label={field.label}
//                   name={field.name}
//                   type={field.inputType}
//                   value={formData[field.name] || ''}
//                   onChange={handleChange}
//                   placeholder={field.placeholder}
//                   errors={errors[field.name]}
//                 />
//               );
//             } else if (field.type === 'textareascroll') {
//               return (
//                 <TextAreaField
//                   key={field.name}
//                   label={field.label}
//                   name={field.name}
//                   value={formData[field.name] || ''}
//                   onChange={handleChange}
//                   errors={errors[field.name]}
//                 />
//               );
//             } else if (field.type === 'autosizeinput') {
//               return (
//                 <AutosizeInputField
//                   key={field.name}
//                   label={field.label}
//                   name={field.name}
//                   value={formData[field.name] || ''}
//                   onChange={handleChange}
//                   placeholder={field.placeholder}
//                   errors={errors[field.name]}
//                 />
//               );
//             } else if (field.type === 'select') {
//               return (
//                 <SelectField
//                   key={field.name}
//                   label={field.label}
//                   name={field.name}
//                   value={formData[field.name] || ''}
//                   onChange={handleChange}
//                   options={field.options}
//                   errors={errors[field.name]}
//                 />
//               );
//             } else if (field.type === 'selectWithOther') {
//               return (
//                 <SelectWithOtherField
//                   key={field.name}
//                   label={field.label}
//                   name={field.name}
//                   value={formData[field.name] || ''}
//                   onChange={handleChange}
//                   options={field.options}
//                   errors={errors[field.name]}
//                 />
//               );
//             } else if (field.type === 'multiSelect') {
//               return (
//                 <MultiSelectField
//   key={field.name}
//   label={field.label}
//   name={field.name}
//   value={formData[field.name] || []}  // still using string[]
//   onChange={(selectedOptions) => handleMultiSelectChange(selectedOptions, field.name)}
//   options={field.options}
//   errors={errors[field.name]}
// />
//               );
//             } else if (field.type === 'multiSelectWithOther') {
//               return (
//              <MultiSelectWithOtherField
//   key={field.name}
//   label={field.label}
//   name={field.name}
//   values={formData[field.name] || []}
//   onChange={(selectedOptions) => handleMultiSelectChange(selectedOptions, field.name)}
//   options={field.options}
//   errors={errors[field.name]}
// />

//               );
//             }
//             return null;
//           })}
//         </div>
//         {globalMessage && <Alert message={globalMessage.message} type={globalMessage.type} />}
//         <div className="flex justify-between items-center mt-6">
//           <Button type="submit" className="w-full bg-blue-500 hover:bg-blue-700 border border-blue-700">
//             Submit
//           </Button>
//         </div>
//       </form>
//     </Frame3>
//   );
// };

// export default DemographicsPage;



//+++++++++++JS version+++++++++++++++++
// src/components/pages/DemographicsPage.jsx
 // JS version
// last final working with multiselect fields .
// import React, { useState } from 'react';
// import { useNavigate } from 'react-router-dom';
// import { collection, doc, setDoc } from 'firebase/firestore';
// import { useAuth } from '../../data/AuthContext';
// import { db, storage } from '../../firebase/firebase';
// import InputField from '../common/InputField';
// import SelectField from '../common/SelectField';
// import SelectWithOtherField from '../common/SelectWithOtherField';
// import MultiSelectField from '../common/MultiSelectField';
// import TextAreaField from '../common/TextAreaField';
// import MultiSelectWithOtherField from '../common/MultiSelectWithOtherField';
// import AutosizeInputField from '../common/AutosizeInputField';
// import Button from '../common/Button';
// import Alert from '../common/Alert';
// import DateTimeDisplay from '../common/DateTimeDisplay';
// import { demographicFields } from '../../data/demographicFields';
// import { ref, uploadString } from "firebase/storage";
// import {
//   validatePositiveNumber, validateEmail, validatePhoneNumber,
//   validateRequired, validateDOB, validateAge, compareAgeWithDOB
// } from '../../utils/validation';
// import {Frame3,Frame} from '../common/Frame';
// const DemographicsPage = () => {
//   const navigate = useNavigate();
//   const { currentUser } = useAuth();
//   const [formData, setFormData] = useState({});
//   const [errors, setErrors] = useState({});
//   const [globalMessage, setGlobalMessage] = useState('');

//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setFormData((prev) => ({ ...prev, [name]: value }));

//     const field = demographicFields.find((field) => field.name === name);
//     if (field && field.validate) {
//       const validationErrors = field.validate.map((validate) => validate(value, formData)).flat();
//       if (validationErrors.length === 0) {
//         setErrors((prev) => ({ ...prev, [name]: [] }));
//       } else {
//         setErrors((prev) => ({ ...prev, [name]: validationErrors }));
//       }
//     } else {
//       setErrors((prev) => ({ ...prev, [name]: [] }));
//     }
//     setGlobalMessage(''); // Clear global message on individual field change
//   };

//   const handleMultiSelectChange = (selectedOptions, name) => {
//     const values = selectedOptions ? selectedOptions.map(option => option.value) : [];
//     setFormData((prev) => ({ ...prev, [name]: values }));

//     const field = demographicFields.find((field) => field.name === name);
//     if (field && field.validate) {
//       const validationErrors = field.validate.map((validate) => validate(values, formData)).flat();
//       if (values.length > 0) {
//         setErrors((prev) => ({ ...prev, [name]: [] }));
//       } else {
//         setErrors((prev) => ({ ...prev, [name]: validationErrors }));
//       }
//     } else {
//       setErrors((prev) => ({ ...prev, [name]: [] }));
//     }
//     setGlobalMessage(''); // Clear global message on individual field change
//   };

//   const validateAllFields = () => {
//     const newErrors = {};
//     let hasErrors = false;

//     demographicFields.forEach((field) => {
//       const value = formData[field.name];
//       if (field.validate) {
//         const validationErrors = field.validate.map((validate) => validate(value, formData)).flat();
//         if (validationErrors.length > 0) {
//           newErrors[field.name] = validationErrors;
//           hasErrors = true;
//         }
//       }
//     });

//     if (formData.dob && formData.age) {
//       const ageComparisonErrors = compareAgeWithDOB(formData.dob, formData.age);
//       if (ageComparisonErrors.length > 0) {
//         newErrors.age = ageComparisonErrors;
//         hasErrors = true;
//       }
//     }

//     setErrors(newErrors);

//     return !hasErrors;
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     if (!validateAllFields()) {
//       setGlobalMessage({ message: 'Please fill all missing fields.', type: 'error' });
//       return;
//     }

//     try {
//       const timestamp = new Date();
//       const localDateTime = timestamp.toLocaleString();
//       const formDataWithTimestamp = {
//         ...formData,
//         userId: currentUser.uid,
//         timestamp: timestamp.toISOString(),
//         localDateTime: localDateTime
//       };

//       // Save to Firestore
//       const userDocRef = doc(collection(db, `users/${currentUser.uid}/demographics`));
//       await setDoc(userDocRef, formDataWithTimestamp);
//       console.log('Document written with ID: ', userDocRef.id);

//       // Generate CSV data
//       const csvData = Object.keys(formDataWithTimestamp).map(key => {
//         const value = Array.isArray(formDataWithTimestamp[key])
//           ? formDataWithTimestamp[key].join(';')
//           : formDataWithTimestamp[key];
//         return `${key},${value}`;
//       }).join('\n');
      
//       // Save CSV to Firebase Storage
//       const csvRef = ref(storage, `users/${currentUser.uid}/demographics/${timestamp.toISOString()}.csv`);
//       await uploadString(csvRef, csvData);

//       setGlobalMessage({ message: 'Data submitted successfully.', type: 'success' });
//       setTimeout(() => {
//         navigate('/thank-you', { state: { type: 'demographics' } });
//       }, 2000); // Redirect after 2 seconds
//     } catch (err) {
//       console.error('Error submitting demographics:', err);
//       setGlobalMessage({ message: 'Error submitting data. Please try again.', type: 'error' });
//     }
//   };

//   return (
//     <Frame3 bgColor="bg-yellow-100"
    
//       paddingX="px-1006"         // Increase horizontal padding
//       marginX="mx-800"           // Add margin on both sides
//       >
//        <h2 className="text-3xl font-bold mb-4 text-center">Demographics Information</h2>
//        <DateTimeDisplay />
//       <form onSubmit={handleSubmit}>
//         <div className="grid grid-cols-1 md:grid-cols-3 gap-24">
//           {demographicFields.map((field) => {
//             if (field.type === 'input') {
//               return (
//                 <InputField
//                   key={field.name}
//                   label={field.label}
//                   name={field.name}
//                   type={field.inputType}
//                   value={formData[field.name] || ''}
//                   onChange={handleChange}
//                   placeholder={field.placeholder}
//                   errors={errors[field.name]}
//                 />
//               );
//             } else if (field.type === 'textareascroll') {
//               return (
//                 <TextAreaField
//                   key={field.name}
//                   label={field.label}
//                   name={field.name}
//                   value={formData[field.name] || ''}
//                   onChange={handleChange}
//                   errors={errors[field.name]}
//                 />
//               );
            
//             } else if (field.type === 'autosizeinput') {
//               return (
//                 <AutosizeInputField
//                   key={field.name}
//                   label={field.label}
//                   name={field.name}
//                   value={formData[field.name] || ''}
//                   onChange={handleChange}
//                   placeholder={field.placeholder}
//                   errors={errors[field.name]}
//                 />
//               );
//             } else if (field.type === 'select') {
//               return (
//                 <SelectField
//                   key={field.name}
//                   label={field.label}
//                   name={field.name}
//                   value={formData[field.name] || ''}
//                   onChange={handleChange}
//                   options={field.options}
//                   errors={errors[field.name]}
//                 />
//               );
//             } else if (field.type === 'selectWithOther') {
//               return (
//                 <SelectWithOtherField
//                   key={field.name}
//                   label={field.label}
//                   name={field.name}
//                   value={formData[field.name] || ''}
//                   onChange={handleChange}
//                   options={field.options}
//                   errors={errors[field.name]}
//                 />
//               );
//             } else if (field.type === 'multiSelect') {
//               return (
//                 <MultiSelectField
//                   key={field.name}
//                   label={field.label}
//                   name={field.name}
//                   value={formData[field.name] || []}
//                   onChange={(selectedOptions) => handleMultiSelectChange(selectedOptions, field.name)}
//                   options={field.options}
//                   errors={errors[field.name]}
//                 />
//               );
//             } else if (field.type === 'multiSelectWithOther') {
//               return (
//                 <MultiSelectWithOtherField
//                   key={field.name}
//                   label={field.label}
//                   name={field.name}
//                   values={formData[field.name] || []}
//                   onChange={handleMultiSelectChange}
//                   options={field.options}
//                   errors={errors[field.name]}
//                 />
//               );
//             }
//             return null;
//           })}
//         </div>
//         {globalMessage && <Alert message={globalMessage.message} type={globalMessage.type} />}
//         <div className="flex justify-between items-center mt-100">
//           {/* <Button type="submit" className="bg-blue-500 hover:bg-blue-700 border border-blue-700">Submit</Button> */}
//           <Button type="submit" className="w-full bg-blue-500 hover:bg-blue-700 border border-blue-700 mt-4">Submit</Button>
//         </div>
//       </form>
    
//     </Frame3>);
 
// };

// export default DemographicsPage;
